"""
Django settings for studymade project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import config



from environ import Env
env = Env()
env.read_env()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

from dotenv import load_dotenv
load_dotenv(BASE_DIR / ".env")  # ✅ explicitly point to the .env file


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',

    # Required by django-allauth
    'django.contrib.sites',       # REQUIRED!

    # Allauth core apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # if using Google
    'allauth.socialaccount.providers.github',  # if using github
]

SITE_ID=1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # ✅ Add this line
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': env('OAUTH_GOOGLE_CLIENT_ID'),
            'secret': env('OAUTH_GOOGLE_SECRET'),
        },
        'SCOPE': {
            'profile',
            'email'
        },
        'AUTH_PARAMS' : {
            'access_type':'online',
            'prompt':'consent',
        },
    },
    'github': {
        'APP': {
            'client_id': env('OAUTH_GITHUB_CLIENT_ID'),
            'secret': env('OAUTH_GITHUB_SECRET'),
        },
        'AUTH_PARAMS': {
            'prompt': 'consent',  
        },
    },
}



ROOT_URLCONF = 'studymade.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'studymade.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True

TIME_ZONE = 'Asia/Kolkata'       # ✅ Set Django to IST

USE_I18N = True
USE_TZ = True                     # ✅ Keep this True for timezone-aware datetimes



EMAIL_HOST="smtp.gmail.com"
EMAIL_PORT=465
EMAIL_USE_SSL=True

EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")   # return environ.get(key, default)
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')






# ✅ Core Allauth configuration
ACCOUNT_AUTHENTICATION_METHOD = 'email'            # Use email for login
ACCOUNT_EMAIL_REQUIRED = True                      # Email is mandatory
ACCOUNT_USERNAME_REQUIRED = True                   # Username field is still in your model
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'     # Tell Allauth your model has this field
ACCOUNT_UNIQUE_EMAIL = True                        # Email should be unique
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']  # Form fields in signup

# ✅ Redirection
LOGIN_REDIRECT_URL = '/update-user/'               # After login
ACCOUNT_LOGOUT_REDIRECT_URL = '/logout/'           # After logout

# ✅ OAuth (Google, GitHub)
SOCIALACCOUNT_AUTO_SIGNUP = True                   # Auto create user on first login via social
SOCIALACCOUNT_QUERY_EMAIL = True                   # Ask for email if not returned
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"          # Skip email verification
SOCIALACCOUNT_LOGIN_ON_GET = True                  # Auto login on OAuth callback
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True          # Allow email-based matching
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True  # Auto-link social login to existing account



# ✅ Custom Adapters (if you override account or socialaccount behavior)
ACCOUNT_ADAPTER = "base.adapters.CustomAccountAdapter"
SOCIALACCOUNT_ADAPTER = "base.adapters.MySocialAccountAdapter"








# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), )

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # where collectstatic will copy files to


MEDIA_URL = '/upload/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'upload')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field


# Make sure you tell Django to use your custom user model
AUTH_USER_MODEL = 'base.User'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
